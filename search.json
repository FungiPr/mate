[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MMAF",
    "section": "",
    "text": "Actividades de Modelos Matemáticos Aplicados Fundamentos.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html",
    "href": "modulo4_MMAF.html",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "",
    "text": "Buenaventura es una ciudad en la que el acceso a una infraestructura de comunicación digital viene rezagada en comparación con otras ciudades del país. Según el Ministerio de Tecnologías de la Información y las Comunicaciones, en el año 2020, el 56% de la población en Buenaventura no contaba con acceso a Internet. Esto revela una brecha digital que afecta a la población más vulnerable, que no tiene acceso a servicios de educación, salud, empleo y entretenimiento en línea. Por ello es necesario dedicar esfuerzos para introducir infraestructuras de conectividad que permitan cerrar esta brecha digital. Dadas las condiciones geográficas de Buenaventura, cualquier intento de llevar conectividad a la ciudad debe considerar el hecho de que los recursos económicos son limitados y por lo tanto no siempre es posible contar con conectividad inalámbrica de alta velocidad en todos los puntos de acceso. La instalación de cableado se hace indispensable, y con frecuencia atravesando secciones marinas. En este reto se te plantea la construcción de un modelo que describa el desgaste del material de cableado (medido en términos de diámetro actual) en función del tiempo de permanencia bajo el agua.\n\n\n\n_2fbed608-cdac-4b38-b439-94c831a6a156.jpeg",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html#contexto",
    "href": "modulo4_MMAF.html#contexto",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "",
    "text": "Buenaventura es una ciudad en la que el acceso a una infraestructura de comunicación digital viene rezagada en comparación con otras ciudades del país. Según el Ministerio de Tecnologías de la Información y las Comunicaciones, en el año 2020, el 56% de la población en Buenaventura no contaba con acceso a Internet. Esto revela una brecha digital que afecta a la población más vulnerable, que no tiene acceso a servicios de educación, salud, empleo y entretenimiento en línea. Por ello es necesario dedicar esfuerzos para introducir infraestructuras de conectividad que permitan cerrar esta brecha digital. Dadas las condiciones geográficas de Buenaventura, cualquier intento de llevar conectividad a la ciudad debe considerar el hecho de que los recursos económicos son limitados y por lo tanto no siempre es posible contar con conectividad inalámbrica de alta velocidad en todos los puntos de acceso. La instalación de cableado se hace indispensable, y con frecuencia atravesando secciones marinas. En este reto se te plantea la construcción de un modelo que describa el desgaste del material de cableado (medido en términos de diámetro actual) en función del tiempo de permanencia bajo el agua.\n\n\n\n_2fbed608-cdac-4b38-b439-94c831a6a156.jpeg",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html#objetivos",
    "href": "modulo4_MMAF.html#objetivos",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "Objetivos",
    "text": "Objetivos\n\nObjetivo general\nDiseñar e implementar computacionalmente un modelo matemático que permita estimar el desgaste de material de un cable submarino (con respecto al tamaño del diámetro del cable) en función del tiempo de permanencia en el agua.\n\n\nObjetivos específicos\n\nUtilizar herramientas de Python para la visualización de datos, en particular para observar y analizar el cambio de una variable con respecto a otra.\nIdentificar el concepto de función en términos de transformación de una variable en otra (modelo entrada-salida)\nDeterminar las propiedades específicas de una función lineal (pendiente, punto de corte, dominio, rango, etc.)\nDeterminar las propiedades específicas de una función cuadrática (vértice, eje de simetría, dominio, rango, etc.)",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html#trabajando-con-python",
    "href": "modulo4_MMAF.html#trabajando-con-python",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "Trabajando con Python",
    "text": "Trabajando con Python\n\nVisualización de datos en Python\nEn Python es posible visualizar datos de manera sencilla utilizando la librería matplotlib. La construcción de gráficos en Python corresponde a la misma idea de construir gráficos en papel, es decir, se debe definir un sistema de coordenadas y luego ubicar los puntos que se desean graficar. En el siguiente ejemplo se muestra una representación gráfica del plano cartesiano en Python.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Crear una figura y un conjunto de subtramas\nfig, ax = plt.subplots()\n\n# Dibujar los ejes\nax.axhline(0, color='black',linewidth=0.5)\nax.axvline(0, color='black',linewidth=0.5)\n\n# Configurar los límites de los ejes\nax.set_xlim([-10, 10])\nax.set_ylim([-10, 10])\n\n# Etiquetar los ejes\nax.set_xlabel(\"Eje X\")\nax.set_ylabel(\"Eje Y\")\n\n# Etiquetar las regiones del plano cartesiano\nplt.text(5, 5, 'I', fontsize=12)\nplt.text(-5, 5, 'II', fontsize=12)\nplt.text(-5, -5, 'III', fontsize=12)\nplt.text(5, -5, 'IV', fontsize=12)\n\n# Mostrar la gráfica\nplt.show()\n\n\n\n\n\n\n\n\nLos dos primeras líneas de código son instrucciones de importación en Python. Están importando dos bibliotecas muy utilizadas en el análisis de datos y la visualización: matplotlib.pyplot y numpy.\nLa primera línea, import matplotlib.pyplot as plt, importa el módulo pyplot de la biblioteca matplotlib. matplotlib es una biblioteca para la creación de gráficos estáticos, animados e interactivos en Python. pyplot es un módulo de matplotlib que permite controlar muchas características de las gráficas. El as plt es un alias, lo que significa que en lugar de tener que escribir matplotlib.pyplot cada vez que quieras usar una función de este módulo, puedes escribir simplemente plt.\nLa segunda línea, import numpy as np, importa la biblioteca numpy. numpy es una biblioteca para trabajar con números de todo tipo, y proporciona una gran cantidad de funciones matemáticas útiles. Al igual que con matplotlib.pyplot, se utiliza un alias para simplificar el código, por lo que puedes usar np en lugar de numpy para acceder a las funciones y características de numpy.\nEstas dos bibliotecas son fundamentales en el análisis y la visualización de datos en Python, y es muy común verlas importadas juntas al inicio de los scripts de Python en este campo.\nLa línea de código fig, ax = plt.subplots() es una forma común de iniciar una figura y un conjunto de ejes en Matplotlib, una biblioteca de visualización de datos en Python.\nplt.subplots() es una función que devuelve una tupla que contiene una figura y ejes. Aquí, fig y ax son simplemente las variables a las que se asignan la figura y los ejes, respectivamente. Puedes pensar en la “figura” como el contenedor que contiene los “ejes” (donde se dibujan los gráficos).\nPor defecto, plt.subplots() crea una figura con un solo gráfico. Si necesitas más gráficos en la misma figura, puedes especificar el número de filas y columnas como argumentos. Por ejemplo, plt.subplots(2, 2) crearía una figura con 4 gráficos, dispuestos en 2 filas y 2 columnas.\nUna vez que tienes la figura y los ejes, puedes empezar a dibujar en ellos usando métodos como ax.plot(), ax.scatter(), etc. También puedes ajustar las propiedades de la figura y los ejes, como los títulos, las etiquetas de los ejes, los límites de los ejes, y más.\nEn el resto del código , se dibujan los ejes horizontal y vertical de la gráfica con las funciones axhline y axvline. Ambas líneas se dibujan en la posición 0 (el origen) y se configuran con un color negro y un grosor de 0.5.\nLuego, se establecen los límites de los ejes X e Y con las funciones set_xlim y set_ylim. Ambos ejes se configuran para tener un rango de -10 a 10.\nDespués, se etiquetan los ejes X e Y con las funciones set_xlabel y set_ylabel. Estas etiquetas ayudan a identificar los ejes en la gráfica.\nA continuación, se etiquetan las cuatro regiones del plano cartesiano con la función text. Esta función coloca un texto en las coordenadas especificadas. En este caso, se están etiquetando las cuatro cuadrantes del plano cartesiano con los números romanos I, II, III y IV.\nFinalmente, se muestra la gráfica con la función show. Esta función abre una ventana con la gráfica generada.\nSupon que queremos graficar la recta que une los puntos (2,3) y (-1.7). El siguiente código realiza esta tarea\n\nimport matplotlib.pyplot as plt\n\nx = [2, -1] # Observa que se listan los valores de la primera coordenada en cada punto dad\ny = [3, 7] # Observa que se listan los valores de la segunda coordenada en cada punto dado\n\nplt.plot(x, y)\nplt.text(x[0], y[0], f'($x_1$,$y_1$)=({x[0]},{y[0]})', fontsize=12, ha='right')\nplt.text(x[1], y[1], f'($x_2$,$y_2$)=({x[1]},{y[1]})', fontsize=12, ha='left')\nplt.title('Gráfica de la recta que une los puntos ($x_1$,$y_1$) y ($x_2$,$y_2$)')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nComo se ha visto ya en módulos anteriores, es posible usar Python para calcular propiedades o características específicas, por ejemplo, la distancia entre los puntos (2,3) y (-1,7)\n\nimport math\n\n# Definir los puntos\npunto1 = (2, 3)\npunto2 = (-1, 7)\n\n# Calcular la distancia\ndistancia = math.sqrt((punto2[0] - punto1[0])**2 + (punto2[1] - punto1[1])**2)\n\nprint(\"La distancia entre los puntos es:\", distancia)\n\n\nLa distancia entre los puntos es: 5.0\n\n\nLos puntos son representados como listas dos elementos, donde el primer elemento es la coordenada x y el segundo elemento es la coordenada y.Las listas en Python son tipos de datos que pueden almacenar múltiples elementos. Se puede acceder a estos elementos utilizando su índice, que es un número que indica su posición en la lista o tupla. Los índices en Python comienzan en 0, por lo que por ejemplo ,punto2[0] obtiene el primer elemento de la lista punto2.\nPara el cálculo de la distancia ,primero, se resta la coordenada \\(x\\) del primer punto (punto1[0]) de la coordenada \\(x\\) del segundo punto (punto2[0]). Luego, se eleva al cuadrado el resultado de esta resta. Se realiza la misma operación para las coordenadas \\(y\\) de los puntos.\nDespués, se suman estos dos resultados y finalmente se aplica la función math.sqrt para obtener la raíz cuadrada de esta suma. El resultado es la distancia entre punto1 y punto2.\nPodríamos obtener también la pendiente de la recta que une los puntos (2,3) y (-1,7) con la fórmula:\n\\[m = \\dfrac{y_2 - y_1}{x_2 - x_1}.\\]\n\n# Definir los puntos\npunto1 = (2, 3)\npunto2 = (-1, 7)\n\n# Calcular la pendiente\npendiente = (punto2[1] - punto1[1]) / (punto2[0] - punto1[0])\n\nprint(\"La pendiente de la recta es:\", pendiente)\n\nLa pendiente de la recta es: -1.3333333333333333\n\n\nCon estas herramientas es posible observar el comportamiento de una variable con respecto a otra, y realizar cálculos específicos para obtener información relevante de los datos. La siguiente celda visualiza el comportamiento de un conjunto de puntos en el plano\n\nimport matplotlib.pyplot as plt\n\n# Datos de ejemplo\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\n# Crear la gráfica\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, 'o-')  # 'o-' significa que los puntos están conectados por líneas\n\n# Etiquetas de los ejes\nplt.xlabel('Eje X')\nplt.ylabel('Eje Y')\n\n# Título de la gráfica\nplt.title('Gráfica de Y vs X')\n\n# Mostrar la gráfica\nplt.show()\n\n\n\n\n\n\n\n\nObserva ahora un ejemplo, en donde también se grafican datos en \\(Y\\) contra datos en \\(X\\)\n\nimport matplotlib.pyplot as plt\n\n# Datos de ejemplo\nx = [1, 2, 2, 3, 4, 4, 4, 5]\ny = [2, 3, 4, 5, 7, 8, 9, 11]\n\n# Crear la gráfica\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y)  # 'scatter' crea una gráfica de dispersión\n\n# Etiquetas de los ejes\nplt.xlabel('Eje X')\nplt.ylabel('Eje Y')\n\n# Título de la gráfica\nplt.title('Gráfica de Y vs X')\n\n# Mostrar la gráfica\nplt.show()\n\n\n\n\n\n\n\n\nPodrías indicar cual de las dos gráficas anteriores corresponde a una función y cual no?\nGraficar funciones en python es muy sencillo, por ejemplo, para graficar la función\n\\[f(x) = \\dfrac{4}{3}x-\\dfrac{1}{3},\\]\nen el intervalo \\([-10,10]\\) se puede usar el siguiente código\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Genera los valores de x\nx = np.linspace(-10, 10, 400)\n\n# Define la ecuación de la recta\ny = (4/3)*x - (1/3)\n\n# Crea el gráfico\nplt.plot(x, y)\n\n# Establece los límites del gráfico\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\n\n# Muestra el gráfico\nplt.show()\n\n\n\n\n\n\n\n\nLa función linspace está generando una secuencia de 400 números que van desde -10 hasta 10 (ambos inclusive). Los números generados están igualmente espaciados en este rango.\nEl primer argumento de la función linspace es el valor inicial del intervalo, que en este caso es -10. El segundo argumento es el valor final del intervalo, que en este caso es 10. El tercer argumento es el número de muestras que se generarán, que en este caso es 400.\nEl resultado de esta función se almacena en la variable x. Así que después de ejecutar esta línea de código, x será una lista que contiene 400 números igualmente espaciados desde -10 hasta 10.\n\n\nGraficando funciones lineales\nCombinando las herramientas presentadas anteriormente, es posible graficar la recta que une dos puntos en el plano cartesiano, para cualquier par de puntos dados, es decir, dados \\((x_1,y_1)\\) y \\((x_2,y_2)\\), queremos obtener la recta que pasa por estos dos puntos con la ecuación \\(y = mx + b\\), donde \\(m\\) es la pendiente de la recta y \\(b\\) es la ordenada al origen.\n\nimport libreria4 as li\n# Definir los puntos\npunto1 = (2, 3)\npunto2 = (-1, 7)\n\n# Llamar a la función para graficar la recta\nli.grafica_recta(punto1, punto2)\n\n\n\n\n\n\n\n\nAhora bien, si usamos la forma punto pendiente , es decir \\(y-y_0=m(x-x_0)\\), donde \\((x_0,y_0)\\) es un punto en la recta, podemos graficar la recta correspondiente a la pendiente dada \\(m\\) y el punto dado \\((x_0,y_0)\\).\n\nimport libreria4 as li\n\n# Definir la pendiente y el punto\npendiente = -4/3\npunto = (2, 3)\n\n# Llamar a la función para graficar la recta\nli.grafica_recta_pendiente_punto(pendiente, punto)\n\n\n\n\n\n\n\n\nDadas dos rectas \\(y = m_1x + b_1\\) y \\(y = m_2x + b_2\\), es posible graficarlas en un mismo plano cartesiano, para ello se puede usar el siguiente código:\n\nimport libreria4 as li\n# Definir las pendientes y los puntos\npendiente1 = 2\npunto1 = (1, 3)\n\npendiente2 = -1/2\n\npunto2 = (2, -2)\n\n# Llamar a la función para graficar ambas rectas\nli.grafica_dos_rectas(pendiente1, punto1, pendiente2, punto2)\n\n\n\n\n\n\n\n\n\n\nGraficando funciones cuadráticas\nAsí como fue posible graficar funciones lineales, es posible realizar la misma tarea para el caso de funciones cuadráticas. Recuerde que una función cuadrática tiene la forma \\(f(x) = ax^2 + bx + c\\), donde \\(a\\), \\(b\\) y \\(c\\) son constantes, \\(a\\neq 0\\). Usaremos la función cuadrática para exhibir otra alternativa a la graficación de funciones en Python que vincula el paquete sympy que se ha usado en módulos anteriores\n\nimport sympy as sp\nfrom sympy.plotting import plot\n\n# Definir la variable\nx = sp.symbols('x')\n\n# Definir la función cuadrática, por ejemplo: f(x) = x^2 + 2x + 1\nf = x**2 + 2*x + 1\n\n# Graficar la función\np = plot(f, show=False)\np.show()\n#\n\n\n\n\n\n\n\n\nEn este caso, la función presentada \\(f(x) = x^2 + 2x + 1\\) es tratada como una entidad simbólica como las que se usaron al momento de resolver ecuaciones y desigualdades con sympy en módulos previos. El llamado a sympy.ploting permite cargar herramientas de graficación de funciones simbólicas en Python\nEn el caso de querer usar Matplotlib para graficar la función cuadrática, se puede usar el siguiente código:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generar valores de x\nx = np.linspace(-10, 10, 400)\n\n# Evaluar la función cuadrática directamente\ny = x**2 + 2*x + 1\n\n# Graficar\nplt.plot(x, y, label='$f(x) = x^2 + 2x + 1$')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title('Gráfica de la función cuadrática')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nComo en el caso de una función lineal, en la que basta con dos puntos , o la pendiente y un punto para trazar la recta, en el caso de una función cuadrática, basta con tres puntos (siempre y cuando estos puntos no estén sobre una misma recta) o el coeficiente principal y un punto para trazar la parábola. En el siguiente código se muestra como graficar una parábola dados 3 puntos.\n\nimport libreria4 as li\n# Definir los tres puntos\npunto1 = (-1, 2)\npunto2 = (2, 3)\npunto3 = (3, 5)\n\n# Llamar a la función para graficar la parábola\nli.grafica_parabola(punto1, punto2, punto3)\n\n\n\n\n\n\n\n\nSi se quiere graficar una parábola en forma canónica (es decir, en la forma \\(f(x) = a(x-h)^2 + k\\)), se puede usar el siguiente código\n\nimport libreria4 as li\n\ncoef_principal = -1\nh=2\nk=3\n# Llamar a la función para graficar la parábola\nli.grafica_parabola_can(coef_principal, h, k)\n\n\n\n\n\n\n\n\nEn las siguientes dos celdas puedes ajustar los valores de \\(a\\), \\(h\\) y \\(k\\) para observar como cambia la gráfica de la parábola en el caso de la forma canónica y también los valores de \\(a\\), \\(b\\) y \\(c\\) para observar como cambia la gráfica de la parábola en el caso de la forma general.\n\nimport libreria4 as li\nfrom IPython.display import display\nimport ipywidgets as widgets \n\n# Crear un widget interactivo para la gráfica\nparabola_widget = widgets.interactive(li.update_grafica, a=li.a_slider, h=li.h_slider, k=li.k_slider)\n\n# Mostrar el widget\ndisplay(parabola_widget)\n\n\n\n\n\nimport libreria4 as li\nfrom IPython.display import display\nimport ipywidgets as widgets\n\n# Crear un widget interactivo para la gráfica\ncuadratica_widget = widgets.interactive(li.update_grafica_cuad, a=li.a_slider, b=li.b_slider, c=li.c_slider)\n\n# Mostrar el widget\ndisplay(cuadratica_widget)\n\n\n\n\n\n\nEjercicios de apropiación y aplicación\n\nDetermine la ecuación de la recta que pasa por el punto \\((4,-2)\\) y es perpendicular a la recta \\(4x-2y+3=0\\).\nEncuentre la ecuación de la recta que pasa por el punto \\((2,3)\\) y es paralela a la recta \\(3x-2y+1=0\\).\nDetermine la ecuación de la recta que pasa por los puntos \\((1,2)\\) y \\((3,4)\\).\nEscriba la ecuación de la parábola que tiene vértice en el punto \\((1,2)\\) y pasa por el punto \\((3,4)\\).\nReescriba la ecuación de la parábola \\(y = 2x^2 + 4x + 1\\) en la forma canónica.\nDetermine el vértice de la parábola \\(y = 2x^2 + 4x + 1\\).\nGrafique las rectas y parábolas obtenidas en los ejercicios anteriores.",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html#conexión-con-el-reto",
    "href": "modulo4_MMAF.html#conexión-con-el-reto",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "Conexión con el reto",
    "text": "Conexión con el reto\n\nAnálisis del desgaste de material protector en pieza metálica\nUna pieza rectangular de metal está recubierta con un material protector que se desgasta linealmente con el tiempo debido a la fricción. La pieza tiene una longitud de \\(L\\) metros y un ancho de \\(W\\) metros. Inicialmente, el grosor del material protector es de \\(T_0\\) milímetros. Después de \\(t\\) meses, el grosor del material protector es de \\(T\\) milímetros.\nSe sabe que el material protector se desgasta a una tasa constante de \\(r\\) milímetros por mes.\n\n\n\nWhatsApp Image 2024-07-17 at 1.52.06 PM.jpeg\n\n\n\nSi \\(T(t)\\) representa el grosor del material protector en milímetros después de \\(t\\) meses, determine \\(T(t)\\) en función de \\(t\\) como una función lineal.\n\nRespuesta. Si \\(T_0\\) es el grosor inicial del material protector, entonces después de \\(t\\) meses, el grosor del material protector es de \\(T_0 - rt\\) milímetros. Por lo tanto, la función lineal que representa el grosor del material protector en función del tiempo es \\(T(t) = T_0 - rt\\).\n\nDetermine el tiempo de desgaste del material protector.\nDeterminar el área total de la superficie expuesta de la pieza de metal después de \\(t\\) meses. (Tener en cuenta la fracción de la superficie que se desgasta con respecto al grosor inicial \\(T_0\\))\nGraficar la función \\(T(t)\\) y determine si la variación del grosor del material protector con respecto al tiempo es positiva o negativa..\nSi la función \\(T(t)\\) es ahora de la forma \\(T(t)=1-2t+4t^2\\), determine el tiempo en que el grosor del material protector es de 1 \\(mm\\).\nConsiderando el punto 5, determine el tiempo en que el grosor del material protector llega a su grosor más pequeño. Grafique y compare su solución con el punto 4.\n\nlink.",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "modulo4_MMAF.html#reto",
    "href": "modulo4_MMAF.html#reto",
    "title": "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos",
    "section": "Reto",
    "text": "Reto\n\nAnálisis del desgaste de material protector en un cable de comunicación\nUn cable de 100 metros de largo y diámetro de 4 centímetros se sumerge en el agua del mar. Debido a la corrosión, el área superficial del cable disminuye a razón de 750 centímetros cuadrados por año. Se sabe que la fórmula para el área superficial de un cilindro (ignorando las tapas superior e inferior) es \\(A=2\\pi rL\\), donde \\(r\\) es el radio del cilindro y \\(L\\) es la longitud del cilindro.\n\n\nActividad\n\nExprese el diámetro \\(d\\) del cable como función del tiempo, en años. (no prestar atención a la corrosión en los extremos del cable)\nDetermine el tiempo en que el diámetro del cable es de 3 centímetros.\n¿En cuanto tiempo el diámetro del cable llega a ser prácticamente cero?\nSuponga que la tasa de desgaste o de corrosión es ahora de \\(750t\\) centímetros cuadrados por año, donde \\(t\\) es el tiempo en años. Exprese el diámetro \\(d\\) del cable como una función del tiempo.\n¿En cuanto tiempo se alcanza el diámetro óptimo del cable?",
    "crumbs": [
      "Reto 4. Reduciendo la brecha de acceso a Internet en población de escasos recursos"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "modulo1_MMAF.html",
    "href": "modulo1_MMAF.html",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "",
    "text": "En Santiago de Cali habita una pequeña criatura que aporta encanto y vitalidad al entorno natural: la ardilla común (Sciurus granatensis), también conocida como la ardilla roja.\n\n\n\nArdilla en la PUJ.jpeg\n\n\nLas ardillas rojas no solo añaden un toque de diversión a los bosques urbanos de la ciudad, sino que también juegan un papel crucial en el equilibrio del ecosistema local. Estos mamíferos son dispersores de grandes cantidades de semillas, y de esporas de hongos y flores. Así contribuyen con la forestación y el transporte de plantas y alimento a otras regiones de su hábitat. También son una importante fuente de proteína para reptiles, aves y otros mamíferos. Sin embargo, cuando su población se eleva en exceso, las ardillas rojas pueden provocar daños a cultivos y hasta ser consideradas como una plaga.",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo1_MMAF.html#contexto",
    "href": "modulo1_MMAF.html#contexto",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "",
    "text": "En Santiago de Cali habita una pequeña criatura que aporta encanto y vitalidad al entorno natural: la ardilla común (Sciurus granatensis), también conocida como la ardilla roja.\n\n\n\nArdilla en la PUJ.jpeg\n\n\nLas ardillas rojas no solo añaden un toque de diversión a los bosques urbanos de la ciudad, sino que también juegan un papel crucial en el equilibrio del ecosistema local. Estos mamíferos son dispersores de grandes cantidades de semillas, y de esporas de hongos y flores. Así contribuyen con la forestación y el transporte de plantas y alimento a otras regiones de su hábitat. También son una importante fuente de proteína para reptiles, aves y otros mamíferos. Sin embargo, cuando su población se eleva en exceso, las ardillas rojas pueden provocar daños a cultivos y hasta ser consideradas como una plaga.",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo1_MMAF.html#objetivos",
    "href": "modulo1_MMAF.html#objetivos",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "Objetivos",
    "text": "Objetivos\n\nObjetivo general\nDiseñar e implementar computacionalmente un modelo matemático que permita estimar la población de ardillas rojas en varias zonas verdes de Santiago de Cali, para varios grupos de edades, a partir de información inicial acerca de su comportamiento reproductivo, hábitos alimenticios y proyección de vida.\n\n\nObjetivos específicos\n\nConocer las representaciones de algunas estructuras numéricas e instrucciones en el lenguaje de programación Python.\nOperar correctamente con estructuras numéricas apoyándose en pequeños fragmentos de código.\nUsar correctamente las operaciones con números representados en notación científica y fraccionarios en un contexto determinado.\nExplorar las propiedades de los números y sus operaciones con la ayuda de experimentos computacionales.\nUsar el lenguaje de programación Python como apoyo para solucionar las preguntas asociadas al reto planteado.",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo1_MMAF.html#trabajando-con-python",
    "href": "modulo1_MMAF.html#trabajando-con-python",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "Trabajando con Python",
    "text": "Trabajando con Python\n\nOperaciones con números\nEl lenguaje de programación Python permite representar números y operarlos aritméticamente de manera sencilla. Por ejemplo, el siguiente fragmento de código imprime la suma, multiplicación y división de dos variables numéricas, a y b, cuyos valores iniciales son 5 y 3, respectivamente. La instrucción print se usa para mostrar el resultado de evaluar una expresión dada.\n\na=5\nb=3\nprint(a+b)\nprint(a*b)\nprint(a/b)\n\n8\n15\n1.6666666666666667\n\n\nEl resultado de la ejecución del fragmento de código inicial se calcula al presionar el botón que aparece en la esquina superior izquierda de la caja que agrupa el código. A esta caja se le denomina celda. En el caso anterior, cada instrucción print en la celda genera una línea de respuesta.\nTal y como sucede al operar matemáticamente con números, en un lenguaje de programación como Python tampoco es permitido efectuar divisiones cuando el divisor es 0. Al tratar de efectuar una operación así, la ejecución de la instrucción correspondiente resulta en un error de ejecución.\n\n1/0\n\nEn particular, la ejecución de la celda anterior indica que el error de ejecución es de tipo ZeroDivisionError y proporciona información adicional de la instrucción que generó dicho error, como la ubicación de la línea de código que origina el error (en este caso la línea 1) y la expresión que concretamente genera el error (en este caso, dividir 1 entre 0).\nCon la ayuda de Python, también es posible realizar otras operaciones como la potenciación. Para ello se usa el operador **. En la siguiente celda se encuentra un fragmento de código que muestra la evaluación de \\(2^3\\):\n\nprint(2**3)\n\nPython soporta una gran cantidad de operaciones aritméticas de manera directa. Adicionalmente, ofrece una librería que agrupa otra cantidad significativa de operaciones aritméticas o con números, incluyendo operaciones trigonométricas. Esta librería es denominada math.\nComo se muestra en la siguiente celda, se pueden usar las operaciones básicas y las que suministra math indistintamente en una misma celda de código. Para usar las operaciones suministradas por esta liberería, se debe anteponer el prefijo math. al nombre de la operación.\n\nimport math                     # importar librería math\na=4\nb=-4\nprint(a**(1/2))                 # operación potencia\nprint(math.sqrt(a))             # operación raíz cuadrada desde math\nprint(abs(b))                   # operación valor absoluto \n\nLas dos primeras operaciones corresponden al cálculo de la raíz cuadrada: en la primera línea se calcula directamente usando la instrucción de exponenciación (y la identidad \\(\\sqrt{4}=4^{\\frac{1}{2}}\\)), mientras que en la segunda línea este valor se calcula usando la función sqrt de math específicamente implementada para ello. La tercera línea muestra el resultado de calcular el valor absoluto \\(|-4|\\) de \\(-4\\) sin usar la librería math.\n\n\nNotación científica\nLa notación científica es una forma compacta de representar números. Es especialmente útil cuando los números son muy grandes o muy pequeños.\nEn la notación científica un número se escribe como el producto de un número entre 1 y 9, y una potencia de 10. Por ejemplo, el número \\(3000000\\) se puede escribir como \\(3 \\times 10^6\\) en notación científica. En Python, se usa la letra e para indicar la potencia de 10 que identifica al número. Por ejemplo, este número se escribiría como 3e6, que es una representación compacta.\nLa siguiente celda contiene ejemplos de algunos números escritos en notación científica usando el lenguaje de programación Python.\n\na=3000000\nprint(a)\nprint('{0:1e}'.format(a))\nprint('{0:1.2e}'.format(a))\n\n3000000\n3.000000e+06\n3.00e+06\n\n\nLos tres casos muestran representaciones de \\(3 \\times 10^6\\). En el primer caso se despliega este número sin ningún formato específico y, en consecuencia, Python usa la representación por defecto para números sin decimales. En la segunda línea se usa un formato específico con un dígito de unidad y seis cifras decimales (la cantidad de ceros después del punto de unidades), mientras que en la tercera se usan un dígito de unidad y dos cifras decimales.\n\nSuma y resta\nPara sumar o restar dos números en notación científica, matemáticamente primero se escriben los números en la misma potencia de 10 y luego se operan las unidades. Por ejemplo, si se desea sumar \\(3 \\times 10^6\\) y \\(2 \\times 10^5\\), primero se escriben los números en la misma potencia de 10 y luego se suman los números, por último se ajusta al formato de notación científica. En Python, esto se puede hacer directamente, como muestra la celda siguiente.\n\na=3e6\nb=2e5\nprint(a+b)\nprint('{0:1.2e}'.format(a+b))       # Usando formato de notación científica\n\n\n\nMultiplicación y división\nPara multiplicar o dividir dos números en notación científica, matemáticamente primero se multiplican o dividen los números entre 1 y 9, y luego se suman o restan las potencias de 10. Por ejemplo, si queremos multiplicar \\(3 \\times 10^6\\) y \\(2 \\times 10^5\\), primero se multiplican \\(3\\) y \\(2\\), y luego se suman \\(6\\) y \\(5\\) al ser sus potencias de \\(10\\), respectivamente. Al igual que con la suma y la resta, estas operaciones pueden hacerse directamente en Python.\n\na=3e6\nb=2e5\nprint(a*b)\nprint('{0:1.2e}'.format(a*b))       # Usando formato de notación científica\n\n\n\n\nNúmeros racionales\nExisten limitaciones al representar números en un computador, puesto que sólo es posible construir representaciones exactas de un conjunto finito de números, y no de todos los números reales. Esto ocurre en cualquier lenguaje de programación, incluyendo Python. Por ello es importante tener cuidado cuando se realizan operaciones con números decimales, ya que en la inmensa mayoría de los casos no se obtiene una representación exacta del número deseado, lo cual, genera errores de precisión, que se pueden acumular en la medida que se hagan muchas operaciones.\nEn los lenguajes de programación, como Python, se usan números decimales para hacer operaciones aritméticas. Sin embargo, en ocasiones es deseable trabajar con números racionales, es decir, números de la forma \\(\\frac{a}{b}\\) con \\(a\\) y \\(b\\) enteros y \\(b\\) diferente de cero. Por ejemplo, el número \\(\\frac{1}{3}\\), se puede representar en Python, con la librería fractions que permite trabajar con este tipo de números.\nEl siguiente fragmento de código, que no es necesario que entienda, define dos funciones que permiten sumar y multiplicar fracciones usando fractions, y detectar cuándo se está tratando de definir u operar una fracción con denominador \\(0\\) (lo cual no es permitido).\n\nSuma y resta\nLa siguiente celda permite calcular la suma \\[\\frac{a}{b} + \\frac{c}{d}\\] cuando, de manera interactiva, se escogen los valores de \\(a,b,c\\) y \\(d\\).\n\nimport libreria1 as li\nfrom IPython.display import display\nimport ipywidgets as widgets\n# crear un widget interactivo para la gráfica\nexp_widget = widgets.interactive(li.sumar_fracciones, a=li.a_slider, b=li.b_slider, c=li.c_slider, d=li.d_slider)\n\n# Mostrar el widget\ndisplay(exp_widget)\n\n\n\n\n\n\nMultiplicación y división\nLa siguiente celda permite calcular el producto \\[\\frac{a}{b}\\times \\frac{c}{d}\\] cuando, de manera interactiva, se escogen los valores de \\(a,b,c\\) y \\(d\\).\n\nimport libreria1 as li\nfrom IPython.display import display\nimport ipywidgets as widgets\n\n# Crear un widget interactivo para la gráfica\nexp_widget = widgets.interactive(li.multiplicar_fracciones, a=li.a_slider, b=li.b_slider, c=li.c_slider,d=li.d_slider)\n\n# Mostrar el widget\ndisplay(exp_widget)\n\n\n\n\n\n\n\nEjercicios de apropiación y aplicación\n\nDetermine los siguientes valores:\n\n\nLa parte entera de \\(3.14\\).\nEl techo de \\(3.14\\).\nEl piso de \\(3.14\\).\n\n\nRealice las siguientes operaciones con números en notación científica:\n\n\n\\((5 \\times 10^6) + (4 \\times 10^5)\\).\n\\((5 \\times 10^6) - (4 \\times 10^5)\\).\n\\((5 \\times 10^6) \\times (4 \\times 10^5)\\).\n\\((5 \\times 10^6) / (4 \\times 10^5)\\).\n\n\nRealice las siguientes operaciones con números racionales:\n\n\n\\(\\dfrac{3}{4} + \\dfrac{2}{3}\\).\n\\(\\dfrac{1}{5} - \\dfrac{2}{3}\\).\n\\(\\dfrac{3}{4} \\times \\dfrac{2}{3}\\).\n\\(\\dfrac{3}{4} \\div \\dfrac{2}{3}\\).",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo1_MMAF.html#conexión-con-el-reto",
    "href": "modulo1_MMAF.html#conexión-con-el-reto",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "Conexión con el reto",
    "text": "Conexión con el reto\n\nDinámica de alimentación de las ardillas rojas\nBiólogos de la Pontificia Universidad Javeriana han estudiado la población de ardillas rojas en varias zonas verdes de Santiago de Cali, y han logrado inferir su distribución y hábitos alimenticios. Durante un año de análisis, han registrado una población total de \\(1.237 \\times 10^4\\) ardillas. Estos biólogos también han logrado clasificar las ardillas en tres grupos principales según sus hábitos alimenticios:\n\nArdillas que se alimentan principalmente de frutas y nueces.\nArdillas que se alimentan principalmente de frutas y nueces, con preferencia por los frutos de las palmas.\nArdillas que se alimentan de una dieta variada, incluyendo frutas, nueces y larvas de insectos.\n\nLas observaciones han revelado las siguientes proporciones en la población de ardillas:\n\n\n\nTipo de consumo de la Ardilla\nProporción\nConsumo Diario (g)\n\n\n\n\nFrutas\n35%\n\\(3.1 \\times 10^2\\)\n\n\nSemillas y Nueces\n45%\n\\(2.5 \\times 10^2\\)\n\n\nDieta Variada\n20%\n\\(2.8 \\times 10^2\\)\n\n\n\nCon base en la información obtenida por los biólogos de la Universidad acerca de las ardillas en las zonas verdes bajo estudio, a continuación se formulan preguntas que ayudarán a entender y aumentar el grado de familiaridad con la dinámica alimentaria de las ardillas. La intención es que se apoye en el contenido expuesto y en celdas de código Python para responder estas preguntas.\n\n\n¿Cuántas ardillas se alimentan principalmente de frutas? Exprese la respuesta en notación científica con exactamente 2 cifras decimales.\n\nRespuesta. El 35% de la población de las ardillas que alimenta principalmente de frutas. Es decir, \\(0.35\\) de \\(1.237 \\times 10^4\\) ardillas se alimentan principalmente de frutas. En total, son \\(4330\\) ardillas, aproximadamente, las que cumplen con la condición dada.\n\nprint('{0:.2e}'.format(0.35*1.237e4))\n\n4.33e+03\n\n\n\n\n¿Cuántas ardillas se alimentan principalmente de semillas y nueces? Exprese la respuesta en notación científica con exactamente 2 cifras decimales.\n\n\n\n¿Cuántas ardillas tienen una dieta variada? Exprese la respuesta en notación científica con exactamente 2 cifras decimales y también como un número fraccionario.\n¿Cuál es el consumo diario total de comida para cada grupo de ardillas? Exprese las cantidades en notación científica con exactamente 3 cifras decimales y también como un número fraccionario.\n\nlink.",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo1_MMAF.html#reto",
    "href": "modulo1_MMAF.html#reto",
    "title": "Reto 1: ¿Cuántas ardillas rojas hay en Cali?",
    "section": "Reto",
    "text": "Reto\n\nDinámica de reproducción de las ardillas\nTambién se está investigando el comportamiento de la población de ardillas rojas. Se ha inferido la siguiente información sobre la población actual de ardillas en las zonas bajo estudio:\n\nArdillas adultas (1 año o más): 6810.\nArdillas juveniles (26 a 52 semanas): 2470.\nArdillas crías (0 a 26 semanas): 3090.\n\nAdicionalmente, se ha encontrado la siguiente información sobre la especie:\n\nProporción de género: la proporción de machos a hembras es de uno a uno en todas las clases de edades (es decir, hay igual número de machos y hembras en cada grupo de edad).\nCiclo reproductivo: un ciclo reproductivo dura 26 semanas. Cada hembra adulta tiene dos crías por ciclo reproductivo.\nSupervivencia en el siguiente ciclo reproductivo:\nDe las 3090 crías, 618 sobrevivieron y pasan a ser juveniles.\nDe las 2470 ardillas juveniles, 1729 sobrevivieron y pasan a ser adultas.\nDe las 6810 ardillas adultas, 5448 sobrevivieron.\n\nCon base en la información anterior y las herramientas computacionales brindadas por el lenguaje de programación Python, responda las siguientes preguntas.\n\n¿Cuál es el porcentaje de supervivencia en cada grupo de edad?\n¿Cuál es la población total de ardillas después del primer ciclo reproductivo?\n¿Cuál es la población total de ardillas después de cinco ciclos reproductivos?\nCon base en las respuestas a las preguntas anteriores, ¿podría argumentar que la población de ardillas aumentaría, disminuiría o se mantendría estable después de varios ciclos reproductivos?\nSi el objetivo es mantener estable la población de ardillas en las zonas verdes bajo estudio, ¿qué acciones podrían sugerir los biólogos a la administración municipal para este fin? Explique qué entiende por “mantener estable”.\nCon base en las proporciones inferidas, ¿cuál debió ser la población de ardillas, por grupo, antes del ciclo reprodictivo que dió lugar a la población inicialmente inferida?",
    "crumbs": [
      "Reto 1: ¿Cuántas ardillas rojas hay en Cali?"
    ]
  },
  {
    "objectID": "modulo3.html",
    "href": "modulo3.html",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "",
    "text": "Una compañía manufacturera en Cali está considerando la adquisición de una nueva maquinaria para fabricar cajas. Esta decisión es fundamental para mejorar su capacidad de producción y eficiencia en el manejo de materiales. La empresa debe considerar no solo el costo inicial de las máquinas, sino también los costos de mantenimiento anuales y cómo estos costos podrían aumentar con el tiempo debido al desgaste y otros factores económicos.\nLa depreciación, el impacto en los costos de producción y la contribución a la eficiencia general de los procesos se evalúan además de los costos iniciales y de mantenimiento. Estos son esenciales para tomar una decisión informada que sea tanto económica como estratégica para el crecimiento y la sostenibilidad de la empresa.\n\n\n\nDALL·E 2024-06-17 18.39.12 - A detailed illustration showing a manufacturing company in Cali considering the acquisition of new machinery for making boxes. The central focus is on.webp"
  },
  {
    "objectID": "modulo3.html#contexto",
    "href": "modulo3.html#contexto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "",
    "text": "Una compañía manufacturera en Cali está considerando la adquisición de una nueva maquinaria para fabricar cajas. Esta decisión es fundamental para mejorar su capacidad de producción y eficiencia en el manejo de materiales. La empresa debe considerar no solo el costo inicial de las máquinas, sino también los costos de mantenimiento anuales y cómo estos costos podrían aumentar con el tiempo debido al desgaste y otros factores económicos.\nLa depreciación, el impacto en los costos de producción y la contribución a la eficiencia general de los procesos se evalúan además de los costos iniciales y de mantenimiento. Estos son esenciales para tomar una decisión informada que sea tanto económica como estratégica para el crecimiento y la sostenibilidad de la empresa.\n\n\n\nDALL·E 2024-06-17 18.39.12 - A detailed illustration showing a manufacturing company in Cali considering the acquisition of new machinery for making boxes. The central focus is on.webp"
  },
  {
    "objectID": "modulo3.html#objetivos",
    "href": "modulo3.html#objetivos",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Objetivos",
    "text": "Objetivos\n\nObjetivo general\nDesarrollar e implementar un modelo matemático para evaluar la viabilidad financiera de adquirir maquinaria a largo plazo en una empresa manufacturera.\n\n\nObjetivos específicos\n\nResolver ecuaciones e inecuaciones de primer grado con una incógnita.\nInterpretar y aplicar los resultados obtenidos en la resolución de ecuaciones e inecuaciones en situaciones problemáticas del mundo real.\nUsar correctamente la notación matemática para expresar la solución de ecuaciones e inecuaciones."
  },
  {
    "objectID": "modulo3.html#trabajando-con-python",
    "href": "modulo3.html#trabajando-con-python",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Trabajando con Python",
    "text": "Trabajando con Python\n\nComo solucionar ecuaciones de primer grado con Python y la librería sympy\nVamos a solucionar una ecuación de primer grado con Python y la librería sympy. Tomemos el ejemplo de la ecuación\n\\[3x + 2 = 11.\\]\nEn Python podemos trabajar de forma simbólica para resolver este tipo de ecuaciones. Para ello, primero debemos importar la librería sympy y definir la variable simbólica \\(x\\). Luego, definimos la ecuación y la resolvemos.\n\nfrom sympy import Symbol, Eq, solve\n\n# Definimos la variable simbólica x como real\nx = Symbol('x', real=True)\n\n# Definimos la ecuación\n\necuacion = Eq(3*x + 2, 11)\n\n# Resolvemos la ecuación\nprint(\"Resolviendo la ecuación\")\ndisplay(ecuacion)\nsolucion = solve(ecuacion)\n\nprint(\"la solución de la ecuación es:\",solucion)\n\nResolviendo la ecuación\n\n\n\\(\\displaystyle 3 x + 2 = 11\\)\n\n\nla solución de la ecuación es: [3]\n\n\nNote que el programa imprime la solución \\([3]\\). Esto significa que la solución de la ecuación es \\(x = 3\\).\nObservemos otro ejemplo, ahora con la ecuación\n\\[(x+5)(x-1)=x^2-1.\\]\n\nfrom sympy import Symbol, Eq, solve\n\n# Definimos la variable simbólica x\nx = Symbol('x', real=True)\n\n# Definimos la ecuación\n\necuacion = Eq((x + 5)*(x-1), x**2-1)\n\n# Resolvemos la ecuación\nprint(\"Resolviendo la ecuación\")\ndisplay(ecuacion)\nsolucion = solve(ecuacion)\n\nprint(\"la solución de la ecuación es:\",solucion)\n\nResolviendo la ecuación\n\n\n\\(\\displaystyle \\left(x - 1\\right) \\left(x + 5\\right) = x^{2} - 1\\)\n\n\nla solución de la ecuación es: [1]\n\n\nNote que para la ecuación anterior \\(x=1\\) es solución y esto es porque si se sustituye la solución en la ecuación original, la igualdad se cumple. Sin embargo, si intentamos reescribir la ecuación anterior factorizándola del siguiente modo: \\[(x-1)(x+5)=(x-1)(x+1),\\] se podría pensar que al dividir en ambos lados de la igualdad por \\((x-1)\\) se obtiene\n\\[x+5=x+1,\\]\nlo cual es incorrecto en todos los números reales ¿Por qué?.\n\n\nComo solucionar inecuaciones de primer grado con Python y la librería sympy\nEs posible representar la solución de una inecuación gráficamente. Por ejemplo, considere la inecuación: \\[3x+5&gt;2,\\] en la siguiente gráfica se muestra la solución de la inecuación, donde la región sombreada en azul representa la solución de la inecuación.\n\nimport libreria3 as li\nli.plot_inequality_solution(3,5,2)\n\n\n\n\n\n\n\n\nUsando la función anterior podemos gráficar el conjunto de inecuaciones de la forma \\[ax+b&gt;c,\\] por ejemplo la inecuación \\[-3x+5&gt;2,\\]\n\nimport libreria3 as li\nli.plot_inequality_solution(-3,5,2)\n\n\n\n\n\n\n\n\nLa librería sympy también permite resolver inecuaciones de una forma muy general, para ello debemos ingresar la inecuación en la función solve_univariate_inequality, y este nos devolverá el intervalo de la solución. Por ejemplo, para la inecuación\n\\[3x+5&gt;2,\\]\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = 3*x +5&gt; 2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\n\nSolución sin relacional: -1 &lt; x\n\n\nObserve otro ejemplo\n\\[-3x+5 \\leq2,\\]\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = -3*x+5 &lt;=2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\n\nSolución sin relacional: Interval.open(1, oo)\n\n\nNote que la solución de la inecuación anterior es \\(x\\geq1\\) y la solución exhibida por el programa es Interval(1, oo) lo que significa que la solución incluye el número real 1. Ahora, si se quiere resolver la inecuación\n\\[-3x+5 &lt;2,\\]\nusamos el programa\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = -3*x+5 &lt;2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\nSolución sin relacional: Interval.open(1, oo)\n\n\nse encuentra que la solución es \\(x&gt;1\\) y la solución exhibida por el programa es Interval.open(1, oo) lo que significa que la solución no incluye el número real 1.\n\n\nSolución de inecuaciones de segundo grado con Python y la librería sympy\nEs posible resolver las innecuaciones de segundo grado gráficamente, vamos a ver un ejemplo\n\\[x^2-3x+2&gt;0,\\]\n\nli.plot_inequality_solution2(1,-3,2)\n\n\n\n\n\n\n\n\n\n\nEjercicios de apropiación y aplicación\n\nResuelva las siguientes ecuaciones y explique su solución\n\n\\(3x - 5 = 11\\)\n\\((3x+2)(x-1)=x^2-1\\)\n\\(\\dfrac{x^2-2x+1}{x-1}=3x-6\\)\n\\(\\dfrac{x^2-x-6}{x+2}=-1\\)\n\nResuelva las siguientes inecuaciones y grafique el intervalo de solución\n\n\\(3x+5&gt;2\\)\n\\(-3x+5\\leq2\\)\n\\(x^2-2x-3&gt;5x-6\\)\n\\(x^2-2x-3\\geq4x +6\\)"
  },
  {
    "objectID": "modulo3.html#conexión-con-el-reto",
    "href": "modulo3.html#conexión-con-el-reto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Conexión con el reto",
    "text": "Conexión con el reto\n\nProceso de selección de proveedor de maquinaria\nLa empresa está considerando la compra de estas máquinas, en la oferta se encontraron con dos proveedores de estas maquinarias. El primer proveedor se llama Interprase el cual ofrece un equipo que tiene un costo inicial de $1’000.000 y requiere un mantenimiento anual de $800.000. El segundo proveedor, llamado Soluciones Express, ofrece un equipo que tiene un costo inicial significativamente más alto de $8’000.000 y un mantenimiento anual de $110.000.\n¿Durante cuánto tiempo se debe utilizar el equipo de Soluciones Express para que los costos totales acumulados sean menores que el equipo de Interprase, asumiendo que los costos de mantenimiento se mantienen constantes en el tiempo?\nPara una decisión más completa, ¿qué otros factores deberían tenerse en cuenta además del costo inicial y el mantenimiento anual?"
  },
  {
    "objectID": "modulo3.html#reto",
    "href": "modulo3.html#reto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Reto",
    "text": "Reto\n\nAnálisis de costos de mantenimiento y actualización de software a largo plazo\nUna empresa tiene dos equipos cuyos costos de mantenimiento anual aumentan cada año debido al desgaste y otros factores económicos. El costo inicial de mantenimiento del equipo de Interprase es de \\(\\$800.000\\) y aumenta en \\(\\$20000\\) por cada año. De manera similar, el costo inicial de mantenimiento del equipo de Soluciones Express es de \\(\\$1'100.000\\) y aumenta en un \\(\\$ 400\\) por cada año. Además, se espera que el costo de actualización de software para ambas máquinas al inicio sea \\(\\$50.000\\) y aumente en una relación \\(\\$2000\\) y \\(\\$20\\) por tiempo al cuadrado, respectivamente.\n\n¿Al cabo de cuántos años el costo anual de mantenimiento del equipo ofrecido por Interprase es igual a 1’200.100?\n¿Cómo podemos representar este problema como una inecuación?\n¿Durante cuántos años debe usarse el equipo de Interprase para que el costo anual de mantenimiento sea menor que el del equipo de Soluciones Express?"
  },
  {
    "objectID": "modulo2_MMAF.html",
    "href": "modulo2_MMAF.html",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "",
    "text": "Colombia es un país rico en recursos hídricos, pero su distribución es desigual. Miles de personas en las zonas rurales enfrentan dificultades para acceder al agua potable. Según el Plan Nacional de Desarrollo 2018-2022, el 86% de la población rural tiene acceso a agua potable, pero solo el 65% accede a agua de calidad. Es fundamental garantizar el acceso al agua potable de calidad en las zonas rurales mediante la construcción de infraestructura civil adecuada. Esto incluye la implementación de acueductos rurales y la construcción de tanques de almacenamiento de agua con las dimensiones necesarias.\n\n\n\nGemini_Generated_Image_91mchb91mchb91mc.jpeg",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo2_MMAF.html#contexto",
    "href": "modulo2_MMAF.html#contexto",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "",
    "text": "Colombia es un país rico en recursos hídricos, pero su distribución es desigual. Miles de personas en las zonas rurales enfrentan dificultades para acceder al agua potable. Según el Plan Nacional de Desarrollo 2018-2022, el 86% de la población rural tiene acceso a agua potable, pero solo el 65% accede a agua de calidad. Es fundamental garantizar el acceso al agua potable de calidad en las zonas rurales mediante la construcción de infraestructura civil adecuada. Esto incluye la implementación de acueductos rurales y la construcción de tanques de almacenamiento de agua con las dimensiones necesarias.\n\n\n\nGemini_Generated_Image_91mchb91mchb91mc.jpeg",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo2_MMAF.html#objetivos",
    "href": "modulo2_MMAF.html#objetivos",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "Objetivos",
    "text": "Objetivos\n\nObjetivo general\nDiseñar e implementar un modelo computacional para estimar matemáticamente el área superficial de un tanque de agua potable en una zona rural del municipio de Cali para garantizar el mínimo vital de agua en la población.\n\n\nObjetivos específicos\n\nManipular correctamente expresiones algebraicas y polinomios.\nEfectuar operaciones de factorización y simplificación de expresiones algebraicas.\nUsar adecuadamente el lenguaje algebraico en la interpretación de problemas en contexto.",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo2_MMAF.html#trabajando-con-python",
    "href": "modulo2_MMAF.html#trabajando-con-python",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "Trabajando con Python",
    "text": "Trabajando con Python\n\nOperaciones simbólicas\nPython permite trabajar con expresiones simbólicas y manipularlas de manera sencilla. Para ello se utiliza la librería sympy, que permite la manipulación de expresiones algebraicas. Inicialmente se debe importar sympy, definir las variables simbólicas que se van a utilizar y luego realizar la operación que se busca resolver. Para mostrar los resultados de las operaciones se utiliza la función display de la librería sympy.\nEmpleando un caso del módulo pasado, los números racionales se pueden visualizar de manera más natural con la función Rational, esto es un objeto simbólico, no un número decimal.\nPor ejemplo sumemos dos racionales:\n\\[\\frac{1}{2} + \\frac{1}{3}\\]\n\nimport sympy as sp\n\nresultado=sp.Rational(1, 2) + sp.Rational(1, 3)\n\nprint(\"Resultado: \")\n\ndisplay(resultado)\n\nResultado: \n\n\n\\(\\displaystyle \\frac{5}{6}\\)\n\n\n\n\nOperaciones con polinomios\nEl siguiente ejemplo muestra dos polinomios de segundo y tercer grado, respectivamente. Si desea especificar que las variables con las que va a operar pertenecen al conjunto de los números reales se utiliza el comando real=True.\n\nimport sympy as sp\n\nx = sp.symbols('x', real=True)\n\nf = x**2 - 2*x - 3\ng= 3*x**3 - 3*x**2 + 4*x - 5\n\ndisplay(f)\ndisplay(g)\n\n\\(\\displaystyle x^{2} - 2 x - 3\\)\n\n\n\\(\\displaystyle 3 x^{3} - 3 x^{2} + 4 x - 5\\)\n\n\n\nSumas y restas\nSe pueden sumar o restar expresiones algebraicas, empleando el operador + y -, respectivamente. A continuación, se presentan ejemplos de suma y resta empleando las expresiones algebraicas f y g, previamente definidas.\n\ndisplay(f+g)\ndisplay(g-f)\n\n\\(\\displaystyle 3 x^{3} - 2 x^{2} + 2 x - 8\\)\n\n\n\\(\\displaystyle 3 x^{3} - 4 x^{2} + 6 x - 2\\)\n\n\n\n\nMultiplicación\nLa multiplicación de expresiones \\(f,g\\) es decir \\(f\\cdot g\\) también se puede realizar de forma simbólica y para expandir la expresión resultante se utiliza la función expand de sympy.\n\ndisplay((f*g))\nprint(\"Expandiendo el resultado\")\ndisplay(sp.expand(f*g))\n\n\\(\\displaystyle \\left(x^{2} - 2 x - 3\\right) \\left(3 x^{3} - 3 x^{2} + 4 x - 5\\right)\\)\n\n\nExpandiendo el resultado\n\n\n\\(\\displaystyle 3 x^{5} - 9 x^{4} + x^{3} - 4 x^{2} - 2 x + 15\\)\n\n\n\n\nFactorización\nDel mismo modo, sympy permite factorizar expresiones algebraicas. Para ello se utiliza la función factor de sympy. A continuación, se presenta la factorización del polinomio de segundo grado \\(x^2-2x-3\\).\n\nf=x**2 - 2*x - 3\ndisplay(f)\nprint(\"Factorizado\")\ndisplay(sp.factor(f))\n\n\\(\\displaystyle x^{2} - 2 x - 3\\)\n\n\nFactorizado\n\n\n\\(\\displaystyle \\left(x - 3\\right) \\left(x + 1\\right)\\)\n\n\n\ng=x**4-16\ndisplay(g)\nprint(\"Factorizado\")\ndisplay(sp.factor(g))\n\n\\(\\displaystyle x^{4} - 16\\)\n\n\nFactorizado\n\n\n\\(\\displaystyle \\left(x - 2\\right) \\left(x + 2\\right) \\left(x^{2} + 4\\right)\\)\n\n\n\n\nSimplificación\nEmpleando sympy también es posible simplificar una expresión algebraica. Para ello se utiliza la función simplify. A continuación, se presenta un ejemplo de como se puede simplificar la siguiente expresión racional: \\[ \\frac{x^2-4}{x^4-16}\\]\n\nf=x**2 -4\ng=x**4-16\n\ndisplay(f/g)\nprint(\"Simplificado\")\ndisplay(sp.simplify(f/g))\n\n\\(\\displaystyle \\frac{x^{2} - 4}{x^{4} - 16}\\)\n\n\nSimplificado\n\n\n\\(\\displaystyle \\frac{1}{x^{2} + 4}\\)\n\n\nEn sympy puede usarse números racionales de forma exacta con la función Rational. A continuación, se presenta un ejemplo de como se puede usar la función Rational para usar un número racional en una expresión algebráica.\n\ndisplay(x**2-x+sp.Rational(1,4))\nprint(\"Factorizado\")\ndisplay(sp.factor(x**2-x+sp.Rational(1,4)))\n\n\\(\\displaystyle x^{2} - x + \\frac{1}{4}\\)\n\n\nFactorizado\n\n\n\\(\\displaystyle \\frac{\\left(2 x - 1\\right)^{2}}{4}\\)\n\n\n\ndisplay(sp.factor(x**2/4-1))\n\n\\(\\displaystyle \\frac{\\left(x - 2\\right) \\left(x + 2\\right)}{4}\\)\n\n\nCon sympy también se pueden definir números reales no racionales como \\(\\pi\\), \\(\\sqrt{2}\\), \\(e\\), entre otros. A continuación, se presentan estos importantes números.\n\nr2=sp.sqrt(2)\ne=sp.exp(1)\npi=sp.pi\ndisplay(sp.pi*x+e*x**2-r2*x**3)\n\n\\(\\displaystyle - \\sqrt{2} x^{3} + e x^{2} + \\pi x\\)\n\n\nsympy permite involucrar múltiples variables, por lo que es posible trabajar con nombres de variables distintas. A continuación, se presenta la expresión algebraica \\(x^2+2xy+y^2\\) y se simplifica.\n\ny,x = sp.symbols('y x', real=True)\n\nf=x**2+2*x*y+y**2\nprint(\"La expresión es:\")\ndisplay(f)\nprint(\"Factorizado\")\ndisplay(sp.factor(f))\n\nLa expresión es:\n\n\n\\(\\displaystyle x^{2} + 2 x y + y^{2}\\)\n\n\nFactorizado\n\n\n\\(\\displaystyle \\left(x + y\\right)^{2}\\)\n\n\n\n\n\nEjercicios de apropiación y aplicación\nFactorizar o expandir las expresiones algebraicas dadas a continuación, según caso.\n\n\\(x^3 - 3x^2 + 2x - 6\\)\n\\(((x-4)+(x^2-7))^2\\)\n\\((a+b+c)^3\\)\nEscriba en una lista los coeficientes de las expresiones anteriores.\nCalcule \\((a+b)^3\\), \\((a+b)^4\\), \\((a+b)^5\\) y escriba en una lista los coeficientes de las expansiones anteriores. ¿Podría inferir los coeficientes de la expansión de \\((a+b)^8?\\)\nConsidere el cilindro mostrado en la figura. Escriba una expresión polinomial con las variables \\(r\\) (radio) y \\(s\\) (longitud) que corresponda al área de la región dada. ¿Cómo cambia el área si el valor de \\(r\\) se incrementa pero el de \\(s\\) está fijo? ¿Que ocurre con el área si \\(r\\) está fijo y \\(s\\) aumenta?\n\n\n\n\nPol..jpeg",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo2_MMAF.html#conexión-con-el-reto",
    "href": "modulo2_MMAF.html#conexión-con-el-reto",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "Conexión con el reto",
    "text": "Conexión con el reto\n\nTanque rectangular para almacenamiento de agua potable\nPara una población ubicada en una vereda del municipio de Cali, se diseñó un tanque para el almacenamiento de agua potable. Este tanque, de forma rectangular, tiene un volumen de \\(1315.7 m^3\\), con un ancho de \\(11.6 m\\) y un largo de \\(35 m\\).\nSe pide encontrar las siguientes dimensiones: 1. La profundidad del tanque rectangular:\nRespuesta\n\n\n\n\nimport sympy as sp\n\n# Definimos las variables\nV, L, A, P = sp.symbols('V L A P')\n\n# Dado el volumen, largo y ancho, definimos la ecuación\nV_eq = sp.Eq(V, L * A * P)\n\n# Despejamos la profundidad P\nP_sol = sp.solve(V_eq, P)[0]\n\n# Mostramos la ecuación resuelta simbólicamente\ndisplay(V_eq, P_sol)\n\n# Sustituimos los valores conocidos\nV_valor = 1315.7  # m^3\nL_valor = 35      # m\nA_valor = 11.6    # m\n\n# Calculamos el valor numérico de la profundidad\nP_valor = P_sol.subs({V: V_valor, L: L_valor, A: A_valor})\n\nprint(\"La profundidad, P = \",'{0:1.2e}'.format(P_valor), \"m\")\n\n\\(\\displaystyle V = A L P\\)\n\n\n\\(\\displaystyle \\frac{V}{A L}\\)\n\n\nLa profundidad, P =  3.24e+0 m\n\n\nLa función solve se utiliza para resolver ecuaciones. En este caso, está resolviendo la ecuación V_eq para la variable P. La función devuelve una lista de soluciones, y [0] al final de la línea de código está seleccionando la primera solución de esa lista. Si se quisiera considerar todas las soluciones, se podría eliminar el [0] y P_sol sería una lista de todas las soluciones posibles.\nLa función subs se utiliza para sustituir una variable simbólica por un valor o por otra expresión. En este caso, P_sol.subs({V: V_valor, L: L_valor, A: A_valor}) está sustituyendo las variables simbólicas V, L y A en la expresión P_sol por los valores V_valor, L_valor y A_valor, respectivamente. El resultado de esta operación se almacena en la variable P_valor.\nEs importante notar que la función subs no modifica la expresión original, en este caso P_sol, sino que devuelve una nueva expresión con las sustituciones realizadas.\n\nSi se decide construir un tanque de base circular para almacenar el mismo volumen y con la misma altura, ¿Cuál debe ser su diámetro?\n\nlink.",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo2_MMAF.html#reto",
    "href": "modulo2_MMAF.html#reto",
    "title": "Reto 2: Agua potable en una población de la zona rural de Cali",
    "section": "Reto",
    "text": "Reto\n\nTanque esférico para almacenamiento de agua potable\nBuscando mejorar el acceso al agua potable de calidad en una zona rural muy aislada de Cali, se ha diseñado un tanque esférico que puede almacenar 10,000 litros de agua. Es crucial estimar el área superficial del tanque para planificar adecuadamente la construcción y los materiales necesarios.\nCon base en la situación anterior y las herramientas computacionales ofrecidas por el lenguaje de programación Python, responda las siguientes preguntas.\n\n¿Qué necesita conocer para determinar el área superficial del tanque?\n¿Cuál es el área superficial del tanque esférico?\n¿Cual es el diámetro de este tanque esférico?\nCon base en los resultados previos ¿Cómo se compara el área superficial del tanque esférico con la de un tanque cilíndrico de la misma capacidad? ¿Qué implicaciones tiene esto en términos de costos de material y mantenimiento? Suponiendo que el valor del material y el mantenimiento es el mismo en cada caso.",
    "crumbs": [
      "Reto 2: Agua potable en una población de la zona rural de Cali"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html",
    "href": "modulo3_MMAF.html",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "",
    "text": "Una compañía manufacturera en Cali está considerando la adquisición de una nueva maquinaria para fabricar cajas. Esta decisión es fundamental para mejorar su capacidad de producción y eficiencia en el manejo de materiales. La empresa debe considerar no solo el costo inicial de las máquinas, sino también los costos de mantenimiento anuales y cómo estos costos podrían aumentar con el tiempo debido al desgaste y otros factores económicos.\nLa depreciación, el impacto en los costos de producción y la contribución a la eficiencia general de los procesos se evalúan además de los costos iniciales y de mantenimiento. Estos son esenciales para tomar una decisión informada que sea tanto económica como estratégica para el crecimiento y la sostenibilidad de la empresa.\n\n\n\nDALL·E 2024-06-17 18.39.12 - A detailed illustration showing a manufacturing company in Cali considering the acquisition of new machinery for making boxes. The central focus is on.webp",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html#contexto",
    "href": "modulo3_MMAF.html#contexto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "",
    "text": "Una compañía manufacturera en Cali está considerando la adquisición de una nueva maquinaria para fabricar cajas. Esta decisión es fundamental para mejorar su capacidad de producción y eficiencia en el manejo de materiales. La empresa debe considerar no solo el costo inicial de las máquinas, sino también los costos de mantenimiento anuales y cómo estos costos podrían aumentar con el tiempo debido al desgaste y otros factores económicos.\nLa depreciación, el impacto en los costos de producción y la contribución a la eficiencia general de los procesos se evalúan además de los costos iniciales y de mantenimiento. Estos son esenciales para tomar una decisión informada que sea tanto económica como estratégica para el crecimiento y la sostenibilidad de la empresa.\n\n\n\nDALL·E 2024-06-17 18.39.12 - A detailed illustration showing a manufacturing company in Cali considering the acquisition of new machinery for making boxes. The central focus is on.webp",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html#objetivos",
    "href": "modulo3_MMAF.html#objetivos",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Objetivos",
    "text": "Objetivos\n\nObjetivo general\nDesarrollar e implementar un modelo matemático para evaluar la viabilidad financiera de adquirir maquinaria a largo plazo en una empresa manufacturera.\n\n\nObjetivos específicos\n\nResolver ecuaciones e inecuaciones de primer grado con una incógnita.\nInterpretar y aplicar los resultados obtenidos en la resolución de ecuaciones e inecuaciones en situaciones problemáticas del mundo real.\nUsar correctamente la notación matemática para expresar la solución de ecuaciones e inecuaciones.",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html#trabajando-con-python",
    "href": "modulo3_MMAF.html#trabajando-con-python",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Trabajando con Python",
    "text": "Trabajando con Python\n\nComo solucionar ecuaciones de primer grado con Python y la librería sympy\nVamos a solucionar una ecuación de primer grado con Python y la librería sympy. Tomemos el ejemplo de la ecuación\n\\[3x + 2 = 11.\\]\nEn Python podemos trabajar de forma simbólica para resolver este tipo de ecuaciones. Para ello, primero debemos importar la librería sympy y definir la variable simbólica \\(x\\). Luego, definimos la ecuación y la resolvemos.\n\nfrom sympy import Symbol, Eq, solve\n\n# Definimos la variable simbólica x como real\nx = Symbol('x', real=True)\n\n# Definimos la ecuación\n\necuacion = Eq(3*x + 2, 11)\n\n# Resolvemos la ecuación\nprint(\"Resolviendo la ecuación\")\ndisplay(ecuacion)\nsolucion = solve(ecuacion)\n\nprint(\"la solución de la ecuación es:\",solucion)\n\nResolviendo la ecuación\n\n\n\\(\\displaystyle 3 x + 2 = 11\\)\n\n\nla solución de la ecuación es: [3]\n\n\nNote que el programa imprime la solución \\([3]\\). Esto significa que la solución de la ecuación es \\(x = 3\\).\nObservemos otro ejemplo, ahora con la ecuación\n\\[(x+5)(x-1)=x^2-1.\\]\n\nfrom sympy import Symbol, Eq, solve\n\n# Definimos la variable simbólica x\nx = Symbol('x', real=True)\n\n# Definimos la ecuación\n\necuacion = Eq((x + 5)*(x-1), x**2-1)\n\n# Resolvemos la ecuación\nprint(\"Resolviendo la ecuación\")\ndisplay(ecuacion)\nsolucion = solve(ecuacion)\n\nprint(\"la solución de la ecuación es:\",solucion)\n\nResolviendo la ecuación\n\n\n\\(\\displaystyle \\left(x - 1\\right) \\left(x + 5\\right) = x^{2} - 1\\)\n\n\nla solución de la ecuación es: [1]\n\n\nNote que para la ecuación anterior \\(x=1\\) es solución y esto es porque si se sustituye la solución en la ecuación original, la igualdad se cumple. Sin embargo, si intentamos reescribir la ecuación anterior factorizándola del siguiente modo: \\[(x-1)(x+5)=(x-1)(x+1),\\] se podría pensar que al dividir en ambos lados de la igualdad por \\((x-1)\\) se obtiene\n\\[x+5=x+1,\\]\nlo cual es incorrecto en todos los números reales ¿Por qué?.\n\n\nComo solucionar inecuaciones de primer grado con Python y la librería sympy\nEs posible representar la solución de una inecuación gráficamente. Por ejemplo, considere la inecuación: \\[3x+5&gt;2,\\] en la siguiente gráfica se muestra la solución de la inecuación, donde la región sombreada en azul representa la solución de la inecuación.\n\nimport libreria3 as li\nli.plot_inequality_solution(3,5,2)\n\n\n\n\n\n\n\n\nUsando la función anterior podemos gráficar el conjunto de inecuaciones de la forma \\[ax+b&gt;c,\\] por ejemplo la inecuación \\[-3x+5&gt;2,\\]\n\nimport libreria3 as li\nli.plot_inequality_solution(-3,5,2)\n\n\n\n\n\n\n\n\nLa librería sympy también permite resolver inecuaciones de una forma muy general, para ello debemos ingresar la inecuación en la función solve_univariate_inequality, y este nos devolverá el intervalo de la solución. Por ejemplo, para la inecuación\n\\[3x+5&gt;2,\\]\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = 3*x +5&gt; 2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\n\nSolución sin relacional: -1 &lt; x\n\n\nObserve otro ejemplo\n\\[-3x+5 \\leq2,\\]\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = -3*x+5 &lt;=2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\n\nSolución sin relacional: Interval.open(1, oo)\n\n\nNote que la solución de la inecuación anterior es \\(x\\geq1\\) y la solución exhibida por el programa es Interval(1, oo) lo que significa que la solución incluye el número real 1. Ahora, si se quiere resolver la inecuación\n\\[-3x+5 &lt;2,\\]\nusamos el programa\n\nimport sympy as sp\n\n# Definir la variable\nx = sp.symbols('x', real=True)\n\n# Definir la inecuación\ninequality = -3*x+5 &lt;2\n\n# Resolver la inecuación\nsolution = sp.solve_univariate_inequality(inequality, x, relational=False)\n\n\n# Mostrar la solución\nprint(\"Solución sin relacional:\", solution)\n\nSolución sin relacional: Interval.open(1, oo)\n\n\nse encuentra que la solución es \\(x&gt;1\\) y la solución exhibida por el programa es Interval.open(1, oo) lo que significa que la solución no incluye el número real 1.\n\n\nSolución de inecuaciones de segundo grado con Python y la librería sympy\nEs posible resolver las innecuaciones de segundo grado gráficamente, vamos a ver un ejemplo\n\\[x^2-3x+2&gt;0,\\]\n\nli.plot_inequality_solution2(1,-3,2)\n\n\n\n\n\n\n\n\n\n\nEjercicios de apropiación y aplicación\n\nResuelva las siguientes ecuaciones y explique su solución\n\n\\(3x - 5 = 11\\)\n\\((3x+2)(x-1)=x^2-1\\)\n\\(\\dfrac{x^2-2x+1}{x-1}=3x-6\\)\n\\(\\dfrac{x^2-x-6}{x+2}=-1\\)\n\nResuelva las siguientes inecuaciones y grafique el intervalo de solución\n\n\\(3x+5&gt;2\\)\n\\(-3x+5\\leq2\\)\n\\(x^2-2x-3&gt;5x-6\\)\n\\(x^2-2x-3\\geq4x +6\\)",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html#conexión-con-el-reto",
    "href": "modulo3_MMAF.html#conexión-con-el-reto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Conexión con el reto",
    "text": "Conexión con el reto\n\nProceso de selección de proveedor de maquinaria\nLa empresa está considerando la compra de estas máquinas, en la oferta se encontraron con dos proveedores de estas maquinarias. El primer proveedor se llama Interprase el cual ofrece un equipo que tiene un costo inicial de $1’000.000 y requiere un mantenimiento anual de $800.000. El segundo proveedor, llamado Soluciones Express, ofrece un equipo que tiene un costo inicial significativamente más alto de $8’000.000 y un mantenimiento anual de $110.000.\n¿Durante cuánto tiempo se debe utilizar el equipo de Soluciones Express para que los costos totales acumulados sean menores que el equipo de Interprase, asumiendo que los costos de mantenimiento se mantienen constantes en el tiempo?\nPara una decisión más completa, ¿qué otros factores deberían tenerse en cuenta además del costo inicial y el mantenimiento anual?\nlink.",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  },
  {
    "objectID": "modulo3_MMAF.html#reto",
    "href": "modulo3_MMAF.html#reto",
    "title": "Reto 3: ¿Que maquina elegir ?",
    "section": "Reto",
    "text": "Reto\n\nAnálisis de costos de mantenimiento y actualización de software a largo plazo\nUna empresa tiene dos equipos cuyos costos de mantenimiento anual aumentan cada año debido al desgaste y otros factores económicos. El costo inicial de mantenimiento del equipo de Interprase es de \\(\\$800.000\\) y aumenta en \\(\\$20000\\) por cada año. De manera similar, el costo inicial de mantenimiento del equipo de Soluciones Express es de \\(\\$1'100.000\\) y aumenta en un \\(\\$ 400\\) por cada año. Además, se espera que el costo de actualización de software para ambas máquinas al inicio sea \\(\\$50.000\\) y aumente en una relación \\(\\$2000\\) y \\(\\$20\\) por tiempo al cuadrado, respectivamente.\n\n¿Al cabo de cuántos años el costo anual de mantenimiento del equipo ofrecido por Interprase es igual a 1’200.100?\n¿Cómo podemos representar este problema como una inecuación?\n¿Durante cuántos años debe usarse el equipo de Interprase para que el costo anual de mantenimiento sea menor que el del equipo de Soluciones Express?",
    "crumbs": [
      "Reto 3: ¿Que maquina elegir ?"
    ]
  }
]